#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 5

// Function to implement First-Fit allocation
void first_fit(int block_size[], int m, int process_size[], int n) {
    int allocation[MAX_PROCESSES];
    int i, j;

    // Initialize allocation to -1 (not allocated)
    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Try to allocate each process to the first suitable block
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            if (block_size[j] >= process_size[i]) {
                allocation[i] = j;  // Allocate the block
                block_size[j] -= process_size[i];  // Reduce the block size
                break;
            }
        }
    }

    // Display the allocation results
    printf("\nFirst-Fit Allocation:\n");
    for (i = 0; i < n; i++) {
        if (allocation[i] != -1)
            printf("Process %d is allocated to Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d is not allocated\n", i + 1);
    }
}

// Function to implement Best-Fit allocation
void best_fit(int block_size[], int m, int process_size[], int n) {
    int allocation[MAX_PROCESSES];
    int i, j;

    // Initialize allocation to -1 (not allocated)
    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Try to allocate each process to the best-fit block
    for (i = 0; i < n; i++) {
        int best_idx = -1;
        for (j = 0; j < m; j++) {
            if (block_size[j] >= process_size[i]) {
                if (best_idx == -1 || block_size[j] < block_size[best_idx]) {
                    best_idx = j;  // Update best block index
                }
            }
        }

        if (best_idx != -1) {
            allocation[i] = best_idx;
            block_size[best_idx] -= process_size[i];  // Reduce the block size
        }
    }

    // Display the allocation results
    printf("\nBest-Fit Allocation:\n");
    for (i = 0; i < n; i++) {
        if (allocation[i] != -1)
            printf("Process %d is allocated to Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d is not allocated\n", i + 1);
    }
}

// Function to implement Worst-Fit allocation
void worst_fit(int block_size[], int m, int process_size[], int n) {
    int allocation[MAX_PROCESSES];
    int i, j;

    // Initialize allocation to -1 (not allocated)
    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Try to allocate each process to the worst-fit block
    for (i = 0; i < n; i++) {
        int worst_idx = -1;
        for (j = 0; j < m; j++) {
            if (block_size[j] >= process_size[i]) {
                if (worst_idx == -1 || block_size[j] > block_size[worst_idx]) {
                    worst_idx = j;  // Update worst block index
                }
            }
        }

        if (worst_idx != -1) {
            allocation[i] = worst_idx;
            block_size[worst_idx] -= process_size[i];  // Reduce the block size
        }
    }

    // Display the allocation results
    printf("\nWorst-Fit Allocation:\n");
    for (i = 0; i < n; i++) {
        if (allocation[i] != -1)
            printf("Process %d is allocated to Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d is not allocated\n", i + 1);
    }
}

int main() {
    int m, n;
    int block_size[MAX_BLOCKS];  // Array to hold the sizes of memory blocks
    int process_size[MAX_PROCESSES];  // Array to hold the sizes of processes
    int i;

    // Number of memory blocks
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input block sizes
    printf("\nEnter the sizes of the memory blocks:\n");
    for (i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &block_size[i]);
    }

    // Input process sizes
    printf("\nEnter the sizes of the processes:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &process_size[i]);
    }

    // Call the allocation strategies
    first_fit(block_size, m, process_size, n);
    best_fit(block_size, m, process_size, n);
    worst_fit(block_size, m, process_size, n);

    return 0;
}
